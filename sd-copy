#!/bin/bash
###############################################################################
#                                                                             #
#                              Simple Disk Copy                               #
#        ------------------------------------------------------------         #
#         Simple Shell-Frontend for ocs-onthefly (Clonezilla) and dd          #
#                                                                             #
#                       (C)opyright bei Michael Gasbers                       #
#                      MIGANO Professional Web Solutions                      #
#                                                                             #
#                             All rights reserved.                            #
#                                                                             #
###############################################################################
#                                                                             #
# DIESE SOFTWARE WIRD OHNE MÄNGELGEWÄHR UND OHNE JEGLICHE AUSDRÜCKLICHE ODER  #
# STILLSCHWEIGENDE GARANTIE ZUR VERFÜGUNG GESTELLT, EINSCHLIESSLICH UND OHNE  #
# EINSCHRÄNKUNG JEGLICHER GARANTIE FÜR DIE GEBRAUCHSTAUGLICHKEIT ODER EIGNUNG #
# FÜR EINEN BESTIMMTEN ZWECK. ALLE RISIKEN IN BEZUG AUF ERGEBNISSE UND        #
# LEISTUNG DIESER SOFTWARE WERDEN VOLLSTÄNDIG VOM BENUTZER ÜBERNOMMEN!        #
#  *************************************************************************  #
# THIS SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTIES WHAT SO EVER, WHETHER  #
# EXPRESSED OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF       #
# USABILITY OR FITNESS FOR A PARTICULAR PURPOSE. ALL RISKS CONCERNING RESULTS #
# AND PERFORMANCE OF THIS SOFTWARE ARE ASSUMED COMPLETELY BY THE USER!        #
#                                                                             #
###############################################################################
#                                                                             #
#  Jegliche Form der Kopie, Veränderung und kommerziellen Verbreitung dieses  #
#  Scripts oder Teilen davon sowie des Quellcodes ist strengstens verboten!   #
#  *************************************************************************  #
#   Any form of copying, modification or commercial distribution of this      #
#   script or any part thereof or it's sourcecode is strictly prohibited!     #
#  *************************************************************************  #
#   Für Anregungen und Fragen nehmen Sie bitte Kontakt mit uns auf über       #
#   https://migano.de oder per E-Mail an >> kontakt@migano.de <<. Danke.      #
#                                                                             #
###############################################################################
VERSION="1.17"
# Letzte Änderung: 17.11.2022
###############################################################################

###############################################################################
# Schriftfarben und Textbausteine
###############################################################################
# Text normal
black='\033[0;30m'
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
blue='\033[0;34m'
purple='\033[0;35m'
cyan='\033[0;36m'
white='\033[0;97m'
# Text hell
dark_grey='\033[0;90m'
light_red='\033[0;91m'
light_green='\033[0;92m'
light_yellow='\033[0;93m'
light_blue='\033[0;94m'
light_purple='\033[0;95m'
light_cyan='\033[0;96m'
light_grey='\033[0;37m'
# Text fett
bold_black='\033[1;30m'
bold_red='\033[1;31m'
bold_green='\033[1;32m'
bold_yellow='\033[1;33m'
bold_blue='\033[1;34m'
bold_purple='\033[1;35m'
bold_cyan='\033[1;36m'
bold_white='\033[1;37m'
# Text unterstrichen
uline_black='\033[4;30m'
uline_red='\033[4;31m'
uline_green='\033[4;32m'
uline_yellow='\033[4;33m'
uline_blue='\033[4;34m'
uline_purple='\033[4;35m'
uline_cyan='\033[4;36m'
uline_white='\033[4;37m'
# Hintergrund
bg_black='\033[40m'
bg_red='\033[41m'
bg_green='\033[42m'
bg_yellow='\033[43m'
bg_blue='\033[44m'
bg_purple='\033[45m'
bg_cyan='\033[46m'
bg_white='\033[47m'
# Keine Farben
colors_off='\033[0m'
colors_invers='\033[7m'
# Linienfarbe
line_color='\033[0;90m'

FULL_LINE="${line_color}$(printf '─%.0s' {1..80})${colors_off}"
FULLSPACE=$(printf '\x20%.0s' {1..80})

OK_TAG="${bold_green}ok${colors_off}"
HINWEIS_TAG="${bold_blue}Hinweis${colors_off}"
ACHTUNG_TAG="${bold_yellow}Achtung${colors_off}"
ERROR_TAG="${bold_red}Fehler${colors_off}"

###############################################################################
# Funktion zur einfachen Ja/Nein-Abfrage
# Rückgaben: 0 = false (Nein)
#            1 = true (Ja)
###############################################################################
function ask_yes_or_no () {
  echo -e -n " $1 [${bold_yellow}j${colors_off}]a oder [${bold_yellow}n${colors_off}]ein? "
  IYN_RESULT=0
  ANSWER=""
  while [ "$ANSWER" = "" ];
  do
    read -N 1 -r -s ANSWER
    ANSWER=$(echo $ANSWER | sed 's/[^JjNn]*//g')
  done
  echo -e "$ANSWER"
  if [ "$ANSWER" = "J" ] ||
     [ "$ANSWER" = "j" ];
  then
    IYN_RESULT=1
  fi
  return $IYN_RESULT
}

###############################################################################
# Funktion zur Erstellung wahlweise eine Liste aller Disk-Devices oder
# Ermittlung nur des ersten neuen "Buchstabens"
# Parameter:
# 0 = Vollständige neue Liste erstellen (wird in device_list gespeichert)
# 1 = Nur ersten neuen "Buchstaben" finden (wird in first_new_char gespeichert)
###############################################################################
function get_disk_letter () {
  get_only_first_new=$1
  first_new_char=""
  devices_in_list=${#device_list[@]}
  device_chars_list=(a b c d e f g h i j k l m n o p q r s t u v w x y z)
  for device_char in ${device_chars_list[@]};
  do
    if [ $get_only_first_new -ne 1 ] ||
       [ "$first_new_char" == "" ];
    then
      if [ "sd${device_char}" != "$boot_device" ] &&
         [ -b "/dev/sd${device_char}1" ];
      then
        already_exists=0
        c=0
        while [ $c -lt $devices_in_list ] &&
              [ $already_exists -eq 0 ];
        do
          if [ "${device_char}" == "${device_list[$c]}" ];
          then
            already_exists=1
          fi
          ((c+=1))
        done
        if [ $already_exists -eq 0 ];
        then
          first_new_char="$device_char"
          device_list[${devices_in_list}]="$device_char"
          devices_in_list=${#device_list[@]}
        fi
      fi
    fi
  done
}

###############################################################################
# Funktion zur Ermittlung der Hardware-Informationen zu einer Disk
###############################################################################
function show_disk_info () {
  if smartctl --version &>/dev/null;
  then
    DEVICE_NAME="/dev/$1"
    DISK_MODEL=$(LANG=en smartctl -i -d sat ${DEVICE_NAME} 2>/dev/null | grep -i -E "device\s*model" | cut -d":" -f 2 | xargs)
    if [ "$DISK_MODEL" = "" ];
    then
      DISK_MODEL=$(LANG=en lsblk -S -o model ${DEVICE_NAME} 2>/dev/null | awk 'NR>1')
    fi
    if [ "$DISK_MODEL" = "" ];
    then
      DISK_MODEL=$(LANG=en parted ${DEVICE_NAME} print 2>/dev/null | grep -i -E "^model" | cut -d":" -f 2)
    fi
    DISK_MODEL=${DISK_MODEL:0:40}
    DISK_MODEL=$(echo ${DISK_MODEL//_/ } | xargs)
    DISK_SERIAL=$(LANG=en smartctl -i -d sat ${DEVICE_NAME} 2>/dev/null | grep -i -E "serial\s*number" | cut -d":" -f 2 | xargs)
    echo -e -n " - $DISK_MODEL"
    if [ "$DISK_SERIAL" != "" ];
    then
      echo -e -n " ($DISK_SERIAL)"
    fi
  else
    echo -e -n " (keine Angaben)"
  fi
}

###############################################################################
# Funktion zur Einfügung von Leerzeichen
###############################################################################
function insert_spaces () {
  i=1
  while [ $i -lt $1 ];
  do
    echo -e -n " "
    ((i+=1))
  done
}

# ---------------------------------------------------------------------------
# Here we go ...
# ---------------------------------------------------------------------------
printf %b '\e]10;#eeeeee\a' # Schriftfarbe (VT100) immer hell ;)
printf %b '\e]11;#242628\a' # Hintergrundfarbe (VT100) immer dunkel ;)
clear

HEADLINE_TEXT="${bold_white}${bg_blue}"
HEADLINE_TEXT+="$FULLSPACE"$'\n'
HEADLINE_TEXT+="                                Simple Disk Copy                                "$'\n'
HEADLINE_TEXT+="${light_blue}${bg_blue}"
HEADLINE_TEXT+="                                     v $VERSION                                     "$'\n'
HEADLINE_TEXT+="$FULLSPACE"
HEADLINE_TEXT+="${colors_off}"
echo -e "$HEADLINE_TEXT"
echo -e ""
echo -e " Erstellt \"on-the-fly\" eine vollständige Kopie eines Speichermediums auf ein"
echo -e " anderes Medium. Dazu müssen beide Speichermedien physisch angeschlossen sein."
if [ $(id -u) -ne 0 ];
then
  echo -e ""
  echo -e " Bitte als Superuser aufrufen!"
  exit 1
fi

# ---------------------------------------------------------------------------
# Erforderlische Komponenten prüfen und ggf. nachinstallieren
# ---------------------------------------------------------------------------
echo -e ""
echo -e " Prüfe System-Voraussetzungen: "

required_errors=0
required_packages=('clonezilla' 'smartmontools' 'util-linux')
for required_pkg in ${required_packages[@]};
do
  echo -e -n " Modul ${bold_cyan}$required_pkg${colors_off}"
  ((ANZ_SPACES=14-${#required_pkg}))
  insert_spaces $ANZ_SPACES
  echo -e -n " ... "
  if # [ $(LANG=en apk list "$required_pkg" 2>/dev/null | grep -i -c -E "\[installed\]") -eq 0 ] &&
     [ $(LANG=en dpkg-query -W -f='${Status}' "$required_pkg" 2>/dev/null | grep -i -c -E "ok installed") -eq 0 ];
  then
    echo -e -n " wird installiert ... "
    # if apk --version &>/dev/null;
    # then
    #   apk add "$required_pkg" &>/dev/null
    # else
      apt install "$required_pkg" -y &>/dev/null
    # fi
    if [ $? -eq 0 ];
    then
      echo -e "$OK_TAG"
    else
      ((required_errors+=1))
      echo -e "$ERROR_TAG"
    fi
  else
    echo -e "$OK_TAG"
  fi
done

if ! lsblk --version &>/dev/null;
then
  echo -e " "
  echo -e " $ACHTUNG_TAG: Leider stehen auf diesem System nicht alle benötigten Komponenten"
  echo -e " zur Verfügung (util-linux). Das Skript wird daher jetzt beendet."
  echo -e ""
  exit 1
fi

# boot_device="$(df /boot 2>/dev/null | grep -Eo "/dev/[^ ]+" | sed -E "s/\/dev\///" | sed -E "s/[0-9]//")"# Ubuntu only
# boot_device="$(lsblk -n -o pkname $(findmnt -n / 2>/dev/null | awk '{ print $2 }'))" # util-linux (works not on HA)
boot_device="$(findmnt -n / 2>/dev/null | awk '{ print $2 }' | sed -E "s/\/dev\///" | sed -E "s/[0-9]//")" # util-linux
echo -e " System gebootet von ... ${bold_purple}$boot_device${colors_off}"

if [ $required_errors -gt 0 ];
then
  echo -e ""
  echo -e " $HINWEIS_TAG: Auf diesem System fehlen einige wichtige Komponenten, daher"
  echo -e " stehen nicht alle Funktionen des Skripts zur Verfügung."
fi

# ---------------------------------------------------------------------------
# Liste aller Disk-Devices erstellen
# ---------------------------------------------------------------------------
declare -A device_list
first_new_char=""
get_disk_letter 0
devices_in_list=${#device_list[@]}
echo -e ""
# ---------------------------------------------------------------------------
# Auswahl von Quelle und Ziel
# A) Manuelle Auswahl (wenn mindestens 2 Disks angeschlossen sind)
# ---------------------------------------------------------------------------
if [ $devices_in_list -gt 1 ];
then
  do_auto_select=0
  # ----------------------------------------------------------------
  # Auswahlliste anzeigen
  # ----------------------------------------------------------------
  echo -e " Folgende Speichermedien sind gerade angeschlossen:"
  x=0
  while [ $x -lt $devices_in_list ];
  do
    echo -e -n " [${bold_white}${device_list[$x]}${colors_off}] sd${device_list[$x]}"
    show_disk_info "sd${device_list[$x]}"
    echo -e ""
    ((x+=1))
  done
  echo -e ""
  echo -e " Zur Auswahl die entsprechende Taste drücken, oder zum Start des interaktiven"
  echo -e " Modus mit selektivem Medien-Anschluss leere Eingabe machen (Enter drücken)."
  # ----------------------------------------------------------------
  # Quelle auswählen
  # ----------------------------------------------------------------
  echo -e ""
  echo -e -n " Bitte ${bold_white}Quelle${colors_off} auswählen: "
  source_device=""
  source_select=0
  while [ $source_select -eq 0 ] &&
        [ $do_auto_select -eq 0 ];
  do
    read -N 1 -r -s source_device
    source_device=$(echo "$source_device" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z]*//g')
    if [ "$source_device" != "" ];
    then
      source_device="sd$source_device"
      x=0
      while [ $x -lt $devices_in_list ];
      do
        if [ "$source_device" == "sd${device_list[$x]}" ];
        then
          source_select=1
        fi
        ((x+=1))
      done
    else
      echo -e "keine Auswahl - interaktiver Modus wird gestartet."
      echo -e "$FULL_LINE"
      do_auto_select=1
    fi
  done
  # ----------------------------------------------------------------
  # Wenn eine Quelle ausgewählt wurde, dann auch ein Ziel auswählen
  # ----------------------------------------------------------------
  if [ $do_auto_select -eq 0 ];
  then
    echo -e -n "${bold_yellow}$source_device${colors_off}"
    show_disk_info "$source_device"
    echo -e ""
    echo -e -n " Bitte ${bold_white}Ziel${colors_off} auswählen:   "
    dest_device=""
    dest_select=0
    while [ $dest_select -eq 0 ] &&
          [ $do_auto_select -eq 0 ];
    do
      read -N 1 -r -s dest_device
      dest_device=$(echo "$dest_device" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z]*//g')
      if [ "$dest_device" != "" ];
      then
        dest_device="sd$dest_device"
        x=0
        while [ $x -lt $devices_in_list ];
        do
          if [ "$dest_device" == "sd${device_list[$x]}" ] &&
              [ "$dest_device" != "$source_device" ];
          then
            dest_select=1
          fi
          ((x+=1))
        done
      else
        echo -e "keine Auswahl - interaktiver Modus wird gestartet."
        echo -e "$FULL_LINE"
        do_auto_select=1
      fi
    done
    if [ $do_auto_select -eq 0 ];
    then
      echo -e -n "${bold_yellow}$dest_device${colors_off}"
      show_disk_info "$dest_device"
      echo -e ""
    fi
  fi
  # ----------------------------------------------------------------
else
  echo -e " $HINWEIS_TAG: Es wurden nicht genug angeschlossene Speichermedien zum Kopieren"
  echo -e " gefunden, daher wird jetzt automatisch der interaktive Modus gestartet."
  echo -e ""
  echo -e "$FULL_LINE"
  do_auto_select=1
fi
# ---------------------------------------------------------------------------
# Auswahl von Quelle und Ziel
# B) Interaktiver Modus (wenn weniger als 2 Disks angeschlossen
#    sind, oder die manuelle Auswahl abgebrochen wurde)
# ---------------------------------------------------------------------------
if [ $do_auto_select -eq 1 ];
then
  echo -e " ${bold_white}Interaktiver Modus${colors_off}"
  echo -e " $ACHTUNG_TAG: Bitte entferne zunächst vollständig das Quell- UND Ziel-Medium,"
  echo -e -n " sofern diese bereits angeschlossen sind, und drücke dann auf Enter ... "
  read -N 1 -r -s dummy
  echo -e "$OK_TAG"
  device_list=()
  get_disk_letter 0
  echo -e ""
  echo -e " Die jeweiligen Medien werden nun bei Anschluss automatisch erkannt."
  echo -e ""
  echo -e -n " Bitte ${bold_white}Quelle${colors_off} anschließen ... "
  new_disc_letter=""
  while [ "$new_disc_letter" == "" ];
  do
    get_disk_letter 1
    new_disc_letter="$first_new_char"
    (sleep 1 &>/dev/null)
  done
  source_device="sd${new_disc_letter}"
  echo -e -n "${bold_yellow}$source_device${colors_off}"
  show_disk_info "$source_device"
  echo -e ""
  echo -e -n " Bitte ${bold_white}Ziel${colors_off} anschließen ...   "
  new_disc_letter=""
  while [ "$new_disc_letter" == "" ];
  do
    get_disk_letter 1
    new_disc_letter="$first_new_char"
    (sleep 1 &>/dev/null)
  done
  dest_device="sd${new_disc_letter}"
  echo -e -n "${bold_yellow}$dest_device${colors_off}"
  show_disk_info "$dest_device"
  echo -e ""
fi
# ---------------------------------------------------------------------------
# Sicherheitsabfragen
# Wenn Clonezilla nicht installiert ist, dann nur den Deep-Modus (dd)
# zulassen. Ansonsten fragen, welcher Modus verwendet werden soll ...
# ---------------------------------------------------------------------------
echo -e ""
echo -e " ${bold_white}OK${colors_off}, ich bin bereit für den Kopier-Vorgang - nur noch eine Frage ..."
echo -e ""
if [ -f "/usr/sbin/ocs-onthefly" ];
then
  echo -e " $HINWEIS_TAG: Im Standard werden nur die Sektoren kopiert, welche auch mit Daten"
  echo -e " belegt sind, wodurch der Kopier-Vorgang ganz erheblich beschleunigt wird."
  echo -e " Um auch unbelegte Sektoren und damit eventuell versteckte Daten zu kopieren,"
  echo -e " kann der Deep-Mode (Klonen mit dd) verwendet werden, was je nach Belegung"
  echo -e " allerdings sehr viel länger (einige Stunden) dauern kann!"
  echo -e ""
  ask_yes_or_no "Soll der Deep-Mode verwendet werden?"
  deep_mode=$?
  echo -e -n " ${bold_white}OK${colors_off}, also "
  if [ $deep_mode -eq 1 ];
  then
    echo -e "im Deep-Mode kopieren - das kann einige Stunden dauern!"
  else
    echo -e "${bold_blue}keinen${colors_off} Deep-Mode verwenden - das geht schneller."
  fi
else
  echo -e " $HINWEIS_TAG: Es steht nur der Deep-Mode (Klonen mit dd) zur Verfügung,"
  echo -e " der Kopier-Vorgang wird daher sehr viel Zeit in Anspruch nehmen!"
  deep_mode=1
fi
echo -e ""
echo -e " Sorry, die obligatorische Sicherheits-Frage muss ich natürlich noch stellen:"
ask_yes_or_no "Soll ${bold_yellow}$source_device${colors_off} auf ${bold_yellow}$dest_device${colors_off} kopiert werden?"
if [ $? -eq 1 ];
then
  echo -e ""
  echo -e " Zur Sicherheit noch ein letztes Mal - versprochen, danach geht's sofort los!"
  echo -e " $ACHTUNG_TAG: ALLE Daten auf ${bold_white}$dest_device${colors_off} werden UNWIEDERBRINGLICH gelöscht!"
  ask_yes_or_no "Jetzt wirklich ${bold_yellow}$source_device${colors_off} auf ${bold_yellow}$dest_device${colors_off} kopieren?"
  if [ $? -eq 1 ];
  then
    # ----------------------------------
    # Eingehängte Partitionen aushängen
    # ----------------------------------
    echo -e ""
    echo -e -n " Hänge alle betroffenen Partitionen aus ... "
    UMOUNTS_RESULT=0
    # Alle Partitionen des Quell-Medums
    p=1;
    while [ $p -lt 100 ] &&
          [ $UMOUNTS_RESULT -eq 0 ];
    do
      if [ $(df | grep -i -c -E "\/dev\/${source_device}${p}") -ne 0 ];
      then
        umount "/dev/${source_device}${p}" # &>/dev/null
        UMOUNTS_RESULT=$?
      fi
      ((p+=1))
    done
    # Alle Partitionen des Ziel-Medums
    p=1;
    while [ $p -lt 100 ] &&
          [ $UMOUNTS_RESULT -eq 0 ];
    do
      if [ $(df | grep -i -c -E "\/dev\/${dest_device}${p}") -ne 0 ];
      then
        umount "/dev/${dest_device}${p}" # &>/dev/null
        UMOUNTS_RESULT=$?
      fi
      ((p+=1))
    done
    if [ $UMOUNTS_RESULT -eq 0 ];
    then
      echo -e "$OK_TAG"
    else
      echo -e "$ERROR_TAG"
      echo -e " Die Partitionen konnten nicht freigegeben werden!"
      echo -e " Das Skript kann daher leider nicht fortgeführt werden."
      exit 1
    fi
    # --------------------------------------------------------
    # Je nach Auswahl Partitionen oder ganzes Medium kopieren
    # --------------------------------------------------------
    echo -e " Starte Kopier-Vorgang von ${bold_yellow}$source_device${colors_off} nach ${bold_yellow}$dest_device${colors_off} ..."
    echo -e "$FULL_LINE"
    if [ $deep_mode -ne 1 ];
    then
      # echo -e "/usr/sbin/ocs-onthefly -batch -e1 auto -e2 -icds -j2 -nogui -pa command -sfsck -f ${source_device} -t ${dest_device}" # NUR ZUM TESTEN
      /usr/sbin/ocs-onthefly -batch -e1 auto -e2 -icds -j2 -nogui -pa command -sfsck -f ${source_device} -t ${dest_device}
      COPY_RESULT=$?
      echo -e "$FULL_LINE"
      if [ $COPY_RESULT -eq 0 ];
      then
        # Bootloader kopieren (wird zuvor durch ocs-onthefly auf dem Ziel gelöscht bzw. überschrieben)
        echo -e -n " Kopiere Bootloader ... "
        # echo -e "dd if=/dev/${source_device} of=/dev/${dest_device} bs=512 count=4 &>/dev/null" # NUR ZUM TESTEN
        dd if=/dev/${source_device} of=/dev/${dest_device} bs=512 count=4 &>/dev/null
        COPY_RESULT=$?
        if [ $COPY_RESULT -eq 0 ];
        then
          echo -e "$OK_TAG"
        else
          echo -e "$ERROR_TAG"
        fi
      fi
    else
      # echo -e "dd conv=noerror if=/dev/${source_device} of=/dev/${dest_device} status=progress" # NUR ZUM TESTEN
      dd conv=noerror if=/dev/${source_device} of=/dev/${dest_device} status=progress
      COPY_RESULT=$?
    fi
    echo -e "$FULL_LINE"
    if [ $COPY_RESULT -eq 0 ];
    then
      echo -e " Fertig, alles erledigt ... $OK_TAG"
      echo -e " Vielen Dank für die Nutzung und auf Wiedersehen :)"
    else
      echo -e " $ERROR_TAG, der Kopier-Vorgang war nicht erfolgreich!"
    fi
  fi
fi
